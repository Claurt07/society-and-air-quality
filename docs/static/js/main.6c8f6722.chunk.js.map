{"version":3,"sources":["vars.js","contexts/lib/resource.js","contexts/lib/fetchCSV.js","contexts/lib/fetchJSON.js","contexts/SingleLoader.js","contexts/ACSContext.js","contexts/EPAContext.js","components/SlideLayout.js","slides/Intro.js","slides/Questions.js","slides/methodology/DataACS.js","slides/methodology/DataACSExplorer.js","slides/methodology/DataEPA.js","slides/methodology/DataEPAExplorer.js","slides/methodology/Analysis.js","slides/End.js","App.js","serviceWorker.js","index.js"],"names":["YEARS","VIEW_STATES","INITAL","longitude","latitude","zoom","pitch","bearing","US_LEFT","US_RIGHT","REGIONS","geoid","name","ACS_FEATURES","EPA_FEATURES","code","geoidToColor","str","parseInt","substring","path","alt","console","log","DEVELOPMENT","process","url","a","opts","onStep","undefined","notResource","Promise","resolve","reject","Papa","parse","resource","header","quotes","delimiter","download","error","err","message","complete","res","errors","length","data","fetch","method","mode","resp","json","SingleLoader","children","context","useState","loading","setData","useEffect","cancel","displayName","loadValue","loadFunc","Provider","value","defaultValue","Context","React","createContext","timeseriesFlat","timeseriesVert","regions","fetches","map","f","fetchCSV","regionFetches","fetchJSON","all","regionResults","results","stations","stationFetches","stationResults","SlideLayout","footer","style","height","background","Content","padding","Footer","Text","Title","main","direction","size","icon","ExperimentTwoTone","type","IntroSlide","updateMapState","isSlideSelected","EPAContext","Consumer","epa","ACSContext","acs","isLoading","isDataLoaded","viewState","layers","GeoJsonLayer","id","pointRadiusMinPixels","getFillColor","d","properties","acs_geoid","span","offset","showIcon","description","footerText","questionsContent","text","strong","QuestionCircleFilled","fontSize","color","FilterTwoTone","FundTwoTone","questions","q","Item","dot","QuestionsSlide","getLineColor","getElevation","pop","Math","sqrt","opacity","stroked","filled","extruded","wireframe","title","bordered","focusFeaturesContent","TeamOutlined","RocketOutlined","PoundOutlined","focusFeatures","itemLayout","dataSource","renderItem","Meta","avatar","Slide","float","marginTop","gutter","href","target","rel","slideID","year","feature","visState","setVisState","region","regionName","features","find","v","chartData","i","x","y","parseFloat","level","labelInValue","key","width","onChange","Option","xScale","yScale","axisBottom","legend","axisLeft","enableGridY","margin","top","right","bottom","left","colors","scheme","enableCrosshair","isInteractive","HeartOutlined","AreaChartOutlined","acs_cbsa_name","stationsTimeseries","forEach","row","Object","keys","col","startsWith","endsWith","parts","split","stationID","isNaN","push","ts","min","mapStyles","mapMoveInterpolator","LinearInterpolator","slides","Intro","Questions","MethodologyDataACS","MethodologyDataACSExplorer","MethodologyDataEPA","MethodologyDataEPAExplorer","MethodologyAnalysis","End","App","prevUpdateID","transitionDuration","transitionInterpolator","mapStyle","mapState","setMapState","setSlide","slider","useRef","carouselNodes","S","s","updateID","stateUpdateID","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","ref","current","dotPosition","beforeChange","_","to","justify","align","shape","ArrowLeftOutlined","onClick","prev","display","alignItems","verticalAlign","textAlign","ArrowRightOutlined","next","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"sbAEaA,EAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QASvG,IAAMC,EAAc,CACvBC,OAAQ,CACJC,WAAY,UACZC,SAAU,QACVC,KAAM,EACNC,MAAO,EACPC,QAAS,GAEbC,QAAS,CACLL,WAAY,QACZC,SAAU,QACVC,KAAM,EACNC,MAAO,GACPC,QAAS,IAEbE,SAAU,CACNN,WAAY,SACZC,SAAU,QACVC,KAAM,EACNC,MAAO,GACPC,SAAU,KAGLG,EACL,CAAEC,MAAO,QAASC,KAAM,yCADnBF,EAEL,CAAEC,MAAO,QAASC,KAAM,oCAFnBF,EAGL,CAAEC,MAAO,QAASC,KAAM,kCAEnBC,EACJ,YADIA,EAEH,OAFGA,EAGJ,UAHIA,EAIA,qCAEAC,EACL,CAAEC,KAAM,QAASH,KAAM,0CADlBE,EAEH,CAAEC,KAAM,QAASH,KAAM,+BAG1B,SAASI,EAAaL,GACzB,IAAMM,EAAG,UAAMN,GACf,MAAO,CACHO,SAAS,GAAD,OAAID,EAAIE,UAAU,EAAG,IAArB,OAA0BF,EAAIE,UAAU,EAAG,KACnDD,SAASD,EAAIE,UAAU,EAAG,IAC1BD,SAAS,GAAD,OAAID,EAAIE,UAAU,EAAG,IAArB,OAA0BF,EAAIE,UAAU,EAAG,KACnD,K,sBC9CO,WAASC,GAEhB,IAAMC,EAAG,UATA,iDASA,OAAiBD,GAE1B,OADAE,QAAQC,IAAR,8BAAmCH,EAAnC,iBAAgDC,GAAO,CAAEG,aDbrCC,ICcbJ,GCLA,8C,4CAAA,WAAeK,GAAf,2BAAAC,EAAA,6DAAoBC,EAApB,+BAA2B,CACxCC,YAAQC,EACRC,aAAa,GAFA,kBAIN,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAKC,MAAMR,EAAKG,YAAcL,EAAMW,EAASX,GAAM,CAEjDY,QAAQ,EACRC,QAAQ,EACRC,UAAW,IACXC,UAAU,EACVC,MAAO,SAACC,GACNrB,QAAQoB,MAAR,6BAAoChB,GAAO,CAAEiB,QAC7CT,EAAOS,EAAIC,UAEbC,SAAU,SAACC,GACT,GAAIA,EAAIC,OAAOC,OAAS,EACtB,OAAOd,EAAOY,EAAIC,OAAO,IAE3Bd,EAAQa,EAAIG,aAnBL,4C,sBCFA,kD,4CAAA,WAAevB,GAAf,6BAAAC,EAAA,6DAAoBC,EAApB,+BAA2B,CACtCG,aAAa,GADF,kBAIYmB,MAAMtB,EAAKG,YAAcL,EAAMW,EAASX,GAAM,CAC7DyB,OAAQ,MACRC,KAAM,YANH,cAIDC,EAJC,yBAQAA,EAAKC,QARL,sCAUPhC,QAAQoB,MAAR,8BAAqChB,GAArC,MAVO,+D,sBCLf,SAAS6B,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAAW,EACnBC,mBAAS,CAAEC,SAAS,IADD,mBACpCV,EADoC,KAC9BW,EAD8B,KAsB3C,OAnBAC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,4BAAAnC,EAAA,6DACEL,QAAQC,IAAR,UAAekC,EAAQM,YAAvB,iBADF,kBAGuBN,EAAQO,YAH/B,UAGUf,EAHV,QAIQa,EAJR,iDAKIF,EAAQ,aAAED,SAAS,GAAUV,IAC7B3B,QAAQC,IAAR,UAAekC,EAAQM,YAAvB,kBANJ,kDAQIzC,QAAQC,IAAR,UAAekC,EAAQM,YAAvB,mBACAH,EAAQ,CAAED,SAAS,EAAOhB,IAAG,OATjC,2DAFc,sBAgBd,OAhBc,mCAcdsB,GAEO,WAAQH,GAAS,KACvB,CAACL,IAEG,kBAACA,EAAQS,SAAT,CAAkBC,MAAOlB,EAAMO,SAAUA,IAGlDD,EAAaa,aAAe,CAAET,SAAS,EAAMhB,SAAKb,GAEnCyB,QCtBTc,EAAUC,IAAMC,cAAN,aACdC,eAAgB,KAChBC,eAAgB,KAChBC,QAAS,MAENnB,EAAaa,eAGlBC,EAAQN,YAAc,cAEtBM,EAAQL,UAAR,sBAAoB,kCAAArC,EAAA,6DACZgD,EAAU,CACd,iCACA,kCACAC,KAAI,SAACC,GAAD,OAAOC,EAASD,MAEhBE,EAAgB/E,EAAM4E,KAAI,SAACC,GAAD,OAAOG,EAAU,sBAAD,OAAuBH,EAAvB,qBAN9B,SAOU7C,QAAQiD,IAAIF,GAPtB,cAOZG,EAPY,gBASIlD,QAAQiD,IAAIN,GAThB,cASZQ,EATY,yBAUX,CACLX,eAAgBW,EAAQ,GACxBV,eAAgBU,EAAQ,GACxBT,QAASQ,IAbO,2CAiBLb,QC3BTA,EAAUC,IAAMC,cAAN,aACdC,eAAgB,KAChBC,eAAgB,KAChBW,SAAU,MAEP7B,EAAaa,eAGlBC,EAAQN,YAAc,cAEtBM,EAAQL,UAAR,sBAAoB,kCAAArC,EAAA,6DACZgD,EAAU,CACd,iCACA,kCACAC,KAAI,SAACC,GAAD,OAAOC,EAASD,MAJJ,SAKI7C,QAAQiD,IAAIN,GALhB,cAKZQ,EALY,OAOZE,EAAiBrF,EAAM4E,KAAI,SAACC,GAAD,OAAOG,EAAU,uBAAD,OAAwBH,EAAxB,qBAP/B,SAQW7C,QAAQiD,IAAII,GARvB,cAQZC,EARY,yBAUX,CACLd,eAAgBW,EAAQ,GACxBV,eAAgBU,EAAQ,GACxBC,SAAUE,IAbM,2CAiBLjB,Q,wECpBAkB,MAXf,YAA4C,IAArB/B,EAAoB,EAApBA,SAAUgC,EAAU,EAAVA,OAC/B,OACE,uBAAQC,MAAO,CAACC,OAAO,OAAQC,WAAW,gBACxC,sBAAQC,QAAR,CAAgBH,MAAO,CAACC,OAAO,OAAQG,QAAQ,SAC5CrC,GAEFgC,EAAS,sBAAQM,OAAR,CAAeL,MAAO,CAACE,WAAW,gBAAiBH,QAA0B1D,ICErFiE,E,IAAAA,KAAMC,E,IAAAA,MAERC,EACJ,uBAAOC,UAAU,WAAWC,KAAK,QAAQV,MAAO,CAAEI,QAAS,SACzD,uBAAQM,KAAK,QAAQC,KAAM,kBAACC,EAAA,EAAD,QAC3B,2BACE,kBAACL,EAAD,gCACA,kBAACD,EAAD,+BAFF,MAEwC,kBAACA,EAAD,CAAMO,KAAK,aAAX,gDAK5C,SAASC,GAAT,GAA0D,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBACpC,OACE,kBAACC,EAAWC,SAAZ,MACG,SAACC,GAGA,OACE,kBAACC,EAAWF,SAAZ,MACG,SAACG,GACA,IAAMC,EAAYD,EAAInD,SAAWiD,EAAIjD,QAC/BqD,GAAgBD,IAAcD,EAAInE,MAAQiE,EAAIjE,IAmBpD,OAjBIqE,GAAgBP,GAClBD,EAAe,CACbS,UAAWhH,EAAYC,OACvBgH,OAAQ,CACN,IAAIC,IAAa,CACfC,GAAI,kBACJnE,KAAM2D,EAAIxB,SAASwB,EAAIxB,SAASpC,OAAO,GACvCqE,qBAAsB,EACtBC,aAAc,SAACC,GAEb,OAAOvG,EADsCuG,EAArCC,WAAcC,iBAS9B,kBAAC,EAAD,KACE,2BACE,uBAAKC,KAAM,EAAGC,OAAQ,IACpB,uBAAOzB,UAAU,YACda,EAAY,uBAAOnE,QAAQ,kBAAkB0D,KAAK,cAAYxE,EAC9DkF,EAAe,uBAAOpE,QAAS,8BAA+B0D,KAAK,UAAUsB,UAAQ,SAAM9F,GAEzFiF,GAAaD,EAAInE,IAChB,uBAAOC,QAAQ,sCAAsCiF,YAAaf,EAAInE,IAAIC,QAAS0D,KAAK,QAAQsB,UAAQ,SACxG9F,GACDiF,GAAaH,EAAIjE,IAChB,uBAAOC,QAAQ,sCAAsCiF,YAAajB,EAAIjE,IAAIC,QAAS0D,KAAK,QAAQsB,UAAQ,SACxG9F,KAITmE,SAWnBM,GAAWuB,WAAa,kCAETvB,U,mECvEPR,G,IAAAA,KAEFgC,GAAmB,CACvB,CACEC,KAAO,kBAAC,GAAD,CAAMC,QAAM,GAAZ,6JAIP7B,KAAM,kBAAC8B,GAAA,EAAD,CAAsBzC,MAAO,CAAE0C,SAAU,UAC/CC,MAAO,SAET,CACEJ,KAAM,kFACN5B,KAAM,kBAACiC,GAAA,EAAD,OAER,CACEL,KAAM,6FACN5B,KAAM,kBAACkC,GAAA,EAAD,QAIJC,GACJ,4BACGR,GAAiBnD,KAAI,SAAC4D,GAAD,OACpB,uBAAUC,KAAV,CAAeC,IAAKF,EAAEpC,KAAMgC,MAAOI,EAAEJ,OAAQI,EAAER,UAKrD,SAASW,GAAT,GAA8D,IAApCnC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBACxC,OACE,kBAACI,EAAWF,SAAZ,MACG,SAACG,GACA,IAAKA,EAAInD,UAAYmD,EAAInE,KAAO8D,EAAiB,CAAC,IACxCjC,EAA4BsC,EAA5BtC,eAAgBE,EAAYoC,EAAZpC,QACxB8B,EAAe,CACbS,UAAWhH,EAAYO,QACvB0G,OAAQ,CACN,IAAIC,IAAa,CACfC,GAAI,sBACJnE,KAAMyB,EAAQA,EAAQ1B,OAAO,GAC7BqE,qBAAsB,EACtBC,aAAc,SAACC,GAAD,OAAOvG,EAAauG,EAAEC,WAAW7G,QAC/CiI,aAAc,CAAC,IAAK,IAAK,KACzBC,aAAc,SAACtB,GAAO,IACE5G,EAAY4G,EAA1BC,WAAc7G,MAChBmI,EAAMtE,EAAeA,EAAexB,OAAO,GAArC,UAA2CrC,EAA3C,oBAAqE,EACjF,OAAwB,IAAjBoI,KAAKC,KAAKF,IAEnBG,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,OAKnB,OACE,kBAAC,EAAD,KACE,2BACE,uBAAK3B,KAAM,EAAGC,OAAQ,IACpB,uBAAOzB,UAAU,YACb,wBAAMoD,MAAM,qBAAqBC,UAAU,GAC1ChB,WAYrBI,GAAeb,WAAa,sFAEba,U,iDClFTa,GAAuB,CAC3B,CACEpD,KAAM,kBAACqD,GAAA,EAAD,MACNH,MAAO,oBACPzB,YAAa,6FAEf,CACEzB,KAAM,kBAACsD,GAAA,EAAD,MACNJ,MAAO,mBACPzB,YAAa,4FAEf,CACEzB,KAAM,kBAACuD,GAAA,EAAD,MACNL,MAAO,sBACPzB,YAAa,2IAGX+B,GACJ,wBAAMC,WAAW,aAAaC,WAAYN,GAAsBO,WAAY,SAAClF,GAAD,OAC1E,uBAAM4D,KAAN,KACE,uBAAMA,KAAKuB,KAAX,CACEC,OAAQpF,EAAEuB,KAAO,uBAAQA,KAAMvB,EAAEuB,YAAUtE,EAC3CwH,MAAOzE,EAAEyE,MACTzB,YAAahD,EAAEgD,kBAKvB,SAASqC,GAAT,GAAqD,IAApC1D,EAAmC,EAAnCA,eACf,GADkD,EAAnBC,gBACV,CACnB,IAAMQ,EAAS,eAAQhH,EAAYQ,UACnCwG,EAAU5G,MAAQ,IAClB4G,EAAU7G,UAAY,GACtB6G,EAAU9G,WAAa,GACvBqG,EAAe,CAAES,cAGnB,OACE,kBAAC,EAAD,CAAazB,OACX,2BACE,uBAAKmC,OAAQ,GAAID,KAAM,EAAGjC,MAAO,CAAEC,OAAQ,SACzC,wBAAM6D,UAAU,EAAO9D,MAAO,CAAE0E,MAAO,QAASC,UAAW,SACzD,uBAAMJ,KAAN,CACEV,MAAM,eACNzB,YAAa,kOAQrB,uBAAKwC,OAAQ,GAAI5E,MAAO,CAAEC,OAAQ,SAChC,uBAAKgC,KAAM,IACT,wBAAM4B,MAAM,4CAA4CC,UAAU,GAC5E,kCACI,uBAAGe,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,6BADJ,sTAMA,gJAICZ,OAQDM,GAAMpC,WAAa,sFAEJoC,U,+CCxEPnE,G,IAAAA,KAAMC,G,IAAAA,MAEd,SAASkE,GAAT,GAA6D,EAA5CO,QAA6C,IAApCjE,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBAAmB,EAC3B/C,mBAAS,CACvCgH,KAAM,EACNC,QAAS9J,EACTF,MAAOD,EAAWC,QAJuC,mBACpDiK,EADoD,KAC1CC,EAD0C,KAO3D,OACE,kBAAChE,EAAWF,SAAZ,MACG,SAACG,GACA,GAAIA,EAAInD,SAAWmD,EAAInE,IAAK,OAAO,6BAD3B,IAEA6B,EAA4BsC,EAA5BtC,eAAgBE,EAAYoC,EAAZpC,QAEpB+B,GACFD,EAAe,CACbU,OAAQ,CACN,IAAIC,IAAa,CACfC,GAAG,kBAAD,OAAoBwD,EAASF,KAA7B,YAAqCE,EAASD,QAA9C,YAAyDC,EAASE,QACpE7H,KAAMyB,EAAQkG,EAASF,MACvBrD,qBAAsB,EACtBC,aAAc,SAACC,GAAO,IACE5G,EAAY4G,EAA1BC,WAAc7G,MACtB,OAAIA,IAAUiK,EAASjK,MAAc,CAAC,IAAI,IAAI,GACvCK,EAAaL,IAEtBiI,aAAc,CAAC,IAAK,IAAK,KACzBC,aAAc,SAACtB,GAAO,IACE5G,EAAY4G,EAA1BC,WAAc7G,MAChBmI,EAAMtE,EAAeoG,EAASF,MAAxB,UAAiC/J,EAAjC,gBAA8CiK,EAASD,WAAc,EACjF,OAAwB,IAAjB5B,KAAKC,KAAKF,IAEnBG,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,OASnB,IAC4B0B,EADbjE,EAAIpC,QAAQkG,EAASF,MAAMM,SAASC,MAAK,SAACC,GAAD,OAAOA,EAAE1D,WAAW7G,QAAUiK,EAASjK,SACvF6G,WAAc5G,KAEhBuK,EAAY,CAAC,CACjB/D,GAAG,MAAD,OAAQwD,EAASjK,OACnBsC,KAAOuB,EACJI,KAAI,SAACsG,EAAGE,GAAJ,MAAW,CACdC,EAAGrL,EAAMoL,GACTE,EAAGC,WAAWL,EAAE,GAAD,OAAIN,EAASjK,MAAb,gBAA0BiK,EAASD,iBAIxD,OACE,kBAAC,EAAD,KACE,2BACE,uBAAKjD,KAAM,IACT,uBAAOxB,UAAU,YACf,wBAAMoD,MAAM,4CAA4CC,UAAU,GAEhE,2BACA,kBAAC,GAAD,CAAOiC,MAAO,GAAd,UACA,wBACEC,cAAY,EACZrH,aAAc,CAAEsH,IAAKhL,EAAWC,OAChC8E,MAAO,CAAEkG,MAAO,KAChBC,SAAU,SAACV,GAAD,OAAOL,EAAY,eAAKD,EAAN,CAAgBjK,MAAOuK,EAAEQ,SAErD,uBAAQG,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,MACpD,uBAAQiL,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,MACpD,uBAAQiL,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,QAItD,2BACA,kBAAC,GAAD,CAAO4K,MAAO,GAAd,WACA,wBACEC,cAAY,EACZrH,aAAc,CAAEsH,IAAK7K,GACrB4E,MAAO,CAAEkG,MAAO,KAChBC,SAAU,SAACV,GAAD,OAAOL,EAAY,eAAKD,EAAN,CAAgBD,QAASO,EAAEQ,SAEvD,uBAAQG,OAAR,CAAe1H,MAAOtD,GAAmBA,GACzC,uBAAQgL,OAAR,CAAe1H,MAAOtD,GAAoBA,GAC1C,uBAAQgL,OAAR,CAAe1H,MAAOtD,GAAmBA,GACzC,uBAAQgL,OAAR,CAAe1H,MAAOtD,GAAuBA,MAWjD,wBAAO0I,UAAU,GACf,kBAAC,GAAD,CAAOiC,MAAO,GAAIT,GAClB,kBAAC,GAAD,CAAM9C,QAAM,GAAZ,gBAAuB2C,EAASjK,MAAhC,sBAAmDiK,EAASD,UAC5D,6BACA,yBAAKlF,MAAO,CAAEC,OAAQ,IAAKiG,MAAO,MAChC,kBAAC,KAAD,CACE1I,KAAMkI,EACNW,OAAQ,CAAExF,KAAM,SAChByF,OAAQ,CAAEzF,KAAM,UAEhB0F,WAAY,CAAEC,OAAQ,QACtBC,SAAU,CAAED,OAAO,GAAD,OAAKrB,EAASD,UAChCwB,aAAa,EAEbC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,OAAQ,CAAEC,OAAQ,SAClBC,iBAAe,EACfC,eAAa,aAcrC1C,GAAMpC,WAAa,yFAEJoC,U,oBCvITV,GAAuB,CAC3B,CACEpD,KAAM,kBAACyG,GAAA,EAAD,MACNvD,MAAO,yCACPzB,YAAa,wIAEf,CACEzB,KAAM,kBAAC0G,GAAA,EAAD,MACNxD,MAAO,8BACPzB,YAAa,iHAGX+B,GACJ,wBAAMC,WAAW,aAAaC,WAAYN,GAAsBO,WAAY,SAAClF,GAAD,OAC1E,uBAAM4D,KAAN,KACE,uBAAMA,KAAKuB,KAAX,CACEC,OAAQpF,EAAEuB,KAAO,uBAAQA,KAAMvB,EAAEuB,YAAUtE,EAC3CwH,MAAOzE,EAAEyE,MACTzB,YAAahD,EAAEgD,kBAKvB,SAASqC,GAAT,GAAqD,IAApC1D,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBAC/B,GAAIA,EAAiB,CACnB,IAAMQ,EAAS,eAAQhH,EAAYQ,UACnCwG,EAAU5G,MAAQ,IAClB4G,EAAU7G,UAAY,GACtB6G,EAAU9G,WAAa,GACvBqG,EAAe,CAAES,cAGnB,OACE,kBAACP,EAAWC,SAAZ,MACG,SAACC,GACA,GAAIA,EAAIjD,SAAWiD,EAAIjE,IAAK,OAAO,6BAD3B,IAEAyC,EAAawB,EAAbxB,SAER,GAAIqB,EAAiB,CACnB,IAAMQ,EAAS,eAAQhH,EAAYQ,UACnCwG,EAAU5G,MAAQ,IAClB4G,EAAU7G,UAAY,GACtB6G,EAAU9G,WAAa,GACvB8G,EAAU3G,MAAQ,EAClB2G,EAAU1G,QAAU,EACpBiG,EAAe,CACbS,YACAC,OAAQ,CACN,IAAIC,IAAa,CACfC,GAAI,iBACJnE,KAAMmC,EAASA,EAASpC,OAAO,GAC/BqE,qBAAsB,EACtBC,aAAc,SAACC,GAEb,OAAOvG,EADsCuG,EAArCC,WAAcC,iBAQhC,OACE,kBAAC,EAAD,CAAajC,OACX,2BACE,uBAAKmC,OAAQ,GAAID,KAAM,EAAGjC,MAAO,CAAEC,OAAQ,SACzC,wBAAM6D,UAAU,EAAO9D,MAAO,CAAE0E,MAAO,QAASC,UAAW,SACzD,uBAAMJ,KAAN,CACEV,MAAM,eACNzB,YAAa,uIAMrB,uBAAKwC,OAAQ,GAAI5E,MAAO,CAAEC,OAAQ,SAChC,uBAAKgC,KAAM,IACT,wBAAM4B,MAAM,qCAAqCC,UAAU,GAC3E,kCACI,uBAAGe,KAAK,4LAA4LC,OAAO,SAASC,IAAI,uBAAxN,kCADJ,4PAMA,sUAKCZ,UAWDM,GAAMpC,WAAa,qEAEJoC,UCpGPnE,G,IAAAA,KAAMC,G,IAAAA,MAEd,SAASkE,GAAT,GAA6D,EAA5CO,QAA6C,IAApCjE,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBAAmB,EAC3B/C,mBAAS,CACvCgH,KAAM,EACNC,QAAS7J,EAAgBC,KACzBJ,MAAOD,EAAWC,QAJuC,mBACpDiK,EADoD,KAC1CC,EAD0C,KAO3D,OACE,kBAACnE,EAAWC,SAAZ,MACG,SAACC,GACA,GAAIA,EAAIjD,SAAWiD,EAAIjE,IAAK,OAAO,6BAD3B,IAEA6B,EAA6BoC,EAA7BpC,eAAgBY,EAAawB,EAAbxB,SAEpBqB,GACFD,EAAe,CACbU,OAAQ,CACN,IAAIC,IAAa,CACfC,GAAG,kBAAD,OAAoBwD,EAASF,KAA7B,YAAqCE,EAASD,QAA9C,YAAyDC,EAASE,QACpE7H,KAAMmC,EAASwF,EAASF,MACxBrD,qBAAsB,EACtBC,aAAc,SAACC,GAAO,IACa5G,EAAY4G,EAArCC,WAAcC,UACtB,MAAI,UAAG9G,KAAYiK,EAASjK,MAAc,CAAC,IAAI,IAAI,GAC5CK,EAAaL,IAEtBiI,aAAc,CAAC,IAAK,IAAK,KACzBK,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRE,WAAW,OASnB,IACqC0B,EADrB3F,EAASwF,EAASF,MAAMM,SAASC,MAAK,SAACC,GAAD,MAAO,UAAGA,EAAE1D,WAAWC,aAAgBmD,EAASjK,SAC9F6G,WAAcuF,cAEhBC,EAAqB,GAC3BxI,EAAeyI,SAAQ,SAACC,EAAK9B,GAC3B+B,OAAOC,KAAKF,GAAKD,SAAQ,SAACI,GACxB,GAAIA,EAAIC,WAAW1C,EAASjK,QAAU0M,EAAIE,SAAJ,UAAgB3C,EAASD,QAAzB,UAA0C,CAC9E,IAAM6C,EAAQH,EAAII,MAAM,KAClBC,EAAS,UAAMF,EAAM,GAAZ,YAAkBA,EAAM,GAAxB,YAA8BA,EAAM,IAC9CR,EAAmBU,KAAYV,EAAmBU,GAAa,IACpE,IAAMxC,EAAIK,WAAW2B,EAAIG,IACpBM,MAAMzC,IACT8B,EAAmBU,GAAWE,KAAK,CACjCvC,EAAGrL,EAAMoL,GACTE,EAAGJ,WAMb,IAAMC,EAAYgC,OAAOC,KAAKJ,GAAoBpI,KAAI,SAACiJ,GAAD,MAAS,CAC7DzG,GAAG,MAAD,OAAQwD,EAASjK,MAAjB,YAA0BkN,GAC5B5K,KAAM+J,EAAmBa,OAG3B,OACE,kBAAC,EAAD,KACE,2BACE,uBAAKnG,KAAM,IACT,uBAAOxB,UAAU,YACf,wBAAMoD,MAAM,qCAAqCC,UAAU,GAEzD,2BACA,kBAAC,GAAD,CAAOiC,MAAO,GAAd,UACA,wBACEC,cAAY,EACZrH,aAAc,CAAEsH,IAAKhL,EAAWC,OAChC8E,MAAO,CAAEkG,MAAO,KAChBC,SAAU,SAACV,GAAD,OAAOL,EAAY,eAAKD,EAAN,CAAgBjK,MAAOuK,EAAEQ,SAErD,uBAAQG,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,MACpD,uBAAQiL,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,MACpD,uBAAQiL,OAAR,CAAe1H,MAAOzD,EAAWC,OAAQD,EAAWE,QAItD,2BACA,kBAAC,GAAD,CAAO4K,MAAO,GAAd,WACA,wBACEC,cAAY,EACZrH,aAAc,CAAEsH,IAAK5K,EAAgBC,MACrC0E,MAAO,CAAEkG,MAAO,KAChBC,SAAU,SAACV,GAAD,OAAOL,EAAY,eAAKD,EAAN,CAAgBD,QAASO,EAAEQ,SAEvD,uBAAQG,OAAR,CAAe1H,MAAOrD,EAAgBC,MAAOD,EAAgBF,MAC7D,uBAAQiL,OAAR,CAAe1H,MAAOrD,EAAkBC,MAAOD,EAAkBF,SAWrE,wBAAO2I,UAAU,GACf,kBAAC,GAAD,CAAOiC,MAAO,GAAIT,GAClB,kBAAC,GAAD,CAAM9C,QAAM,GAAZ,gBAAuB2C,EAASjK,MAAhC,sBAAmDiK,EAASD,UAC5D,6BACA,yBAAKlF,MAAO,CAAEC,OAAQ,IAAKiG,MAAO,MAChC,kBAAC,KAAD,CACE1I,KAAMkI,EACNW,OAAQ,CAAExF,KAAM,SAChByF,OAAQ,CAAEzF,KAAM,SAAUwH,IAAK,GAE/B9B,WAAY,CAAEC,OAAQ,QACtBC,SAAU,CAAED,OAAO,GAAD,OAAKrB,EAASD,QAAd,WAClBwB,aAAa,EAEbC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,OAAQ,CAAEC,OAAQ,SAClBC,iBAAe,EACfC,eAAa,aAcrC1C,GAAMpC,WAAa,qEAEJoC,UChJPlE,G,IAAAA,MAUOkE,OARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,eCLElE,G,IAAAA,MAER,SAASkE,KACP,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,cAKNA,GAAMpC,WAAa,sBAEJoC,U,8BCWT6D,GAEE,oDAGFC,GAAsB,IAAIC,KAAmB,CAAC,YAE9CC,GAAS,CACbC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAGM3I,G,IAAAA,KAmGO4I,OAjGf,WAAe,MAEmBjL,mBAAS,CACvCkL,cAAe,EAEf3H,UAAU,eACLhH,EAAYC,OADR,CAEP2O,mBAAoB,IACpBC,uBAAwBd,KAE1B9G,OAAQ,GAER6H,SAAU,SAZC,mBAENC,EAFM,KAEIC,EAFJ,OAgBevL,mBAAS,GAhBxB,mBAgBN+G,EAhBM,KAgBGyE,EAhBH,KAiBPC,EAASC,mBACTC,EAAgBnB,GAAOtJ,KAAI,SAAC0K,EAAGlI,GAAJ,OAAW,kBAACkI,EAAD,CAC1C7E,QAASrD,EACTX,gBAAiBW,IAAOqD,EACxBjE,eAAgB,SAAC+I,EAAGC,GAClB,IAAMC,EAAgBD,GAAYpI,EAE9BqI,IAAkBT,EAASJ,aAC7BK,EAAY,CACVL,aAAca,EAEdvI,OAAQqI,EAAErI,QAAU8H,EAAS9H,OAC7BD,UAAWsI,EAAEtI,UAAF,eACN+H,EAAS/H,UADH,GAENsI,EAAEtI,UAFI,CAIT4H,mBAAoB,IACpBC,uBAAwBd,KACtBgB,EAAS/H,YAGf3F,QAAQC,IAAR,gCAAqCkO,UAK3C,OACE,uBAAQhK,MAAO,CAAEC,OAAO,UACtB,sBAAQE,QAAR,CAAgBH,MAAO,CAAEC,OAAO,SAC9B,kBAAC,KAAD,CACEuB,UAAW+H,EAAS/H,UACpBC,OAAQ8H,EAAS9H,QACjB,kBAAC,KAAD,CACID,UAAW+H,EAAS/H,UACpB8H,SAAUhB,GACV2B,WAAS,EACTC,qBAAmB,EACnBC,qBhBrGkBnO,+FgBwGxB,kBAAC,EAAD,CAAcgC,QAASoD,GACrB,kBAAC,EAAD,CAAcpD,QAASiD,GACrB,uBACEmJ,IAAK,SAAAA,GAASV,EAAOW,QAAUD,GAC/BpK,MAAO,CAAEC,OAAQ,QACjBqK,YAAY,MACZC,aAAc,SAACC,EAAGC,GAAShB,EAASgB,IACpC1M,SAAU6L,OAKlB,sBAAQvJ,OAAR,KACE,uBAAKqK,QAAQ,gBAAgB7J,KAAK,OAAO8J,MAAM,UAC7C,uBAAK1I,KAAM,GACR+C,EAAU,EACP,uBAAQnE,KAAK,UAAU+J,MAAM,QAAQjK,KAAM,kBAACkK,EAAA,EAAD,MAAuBnK,KAAK,QACrEoK,QAAS,WAAQpB,EAAOW,QAAQU,eAClC1O,GAEN,uBAAK4F,KAAM,EAAGjC,MAAO,CACnBgL,QAAS,OACTC,WAAY,SACZC,cAAe,SACfC,UAAW,UACVjJ,OAAQ8C,EAAU,EAAI,EAAI,GAC3B,kBAAC,GAAD,CAAMnE,KAAK,YAAYb,MAAO,CAAEkL,cAAe,SAAUD,WAAY,SAAUE,UAAW,WACvF1C,GAAOzD,GAAS3C,aAGrB,uBAAKJ,KAAM,GACT,uBAAQpB,KAAK,UAAU+J,MAAM,QAAQjK,KAAM,kBAACyK,EAAA,EAAD,MAAwB1K,KAAK,QAAQV,MAAO,CAAE0E,MAAO,SAC9FoG,QAAS,WAAQpB,EAAOW,QAAQgB,eC7H1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArP,GACLpB,QAAQoB,MAAMA,EAAME,c","file":"static/js/main.6c8f6722.chunk.js","sourcesContent":["export const DEVELOPMENT = (process.env.NODE_ENV !== 'production');\nexport const MAPBOX_API_TOKEN = process.env.REACT_APP_MAPBOX_API_TOKEN;\nexport const YEARS = ['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'];\nexport function getYearsMarks() {\n    const marks = {};\n    YEARS.forEach((y, i) => {\n        marks[i] = y;\n    });\n    return marks;\n}\n\nexport const VIEW_STATES = {\n    INITAL: {\n        longitude: -128.41669,\n        latitude: 37.7853,\n        zoom: 5,\n        pitch: 0,\n        bearing: 0,\n    },\n    US_LEFT: {\n        longitude: -83.5795,\n        latitude: 41.8283,\n        zoom: 3,\n        pitch: 45,\n        bearing: 15\n    },\n    US_RIGHT: {\n        longitude: -110.5795,\n        latitude: 41.8283,\n        zoom: 3,\n        pitch: 45,\n        bearing: -15\n    },\n};\nexport const REGIONS = {\n    SF: { geoid: '41860', name: 'San Francisco, CA (metropolitan area)' },\n    NY: { geoid: '35620', name: 'New York, NY (metropolitan area)' },\n    AU: { geoid: '12420', name: 'Austin, TX (metropolitan area)'},\n};\nexport const ACS_FEATURES = {\n    POP: 'total_pop',\n    GINI: 'gini',\n    POV: 'poverty',\n    TRANSIT: 'commuters_by_public_transportation',\n};\nexport const EPA_FEATURES = {\n    PM: { code: '88502', name: 'Acceptable PM2.5 AQI & Speciation Mass' },\n    TEMP: { code: '68105', name: 'Average Ambient Temperature' },\n};\n\nexport function geoidToColor(geoid) {\n    const str = `${geoid}`; // 5-char string\n    return [\n        parseInt(`${str.substring(0, 1)}${str.substring(4, 5)}`),\n        parseInt(str.substring(2, 4)),\n        parseInt(`${str.substring(1, 2)}${str.substring(4, 5)}`),\n        255,\n    ];\n}\n","import { DEVELOPMENT } from '../../vars';\n\n// see package.json \"homepage\"\nconst homepage = 'https://bobheadxi.dev/society-and-air-quality';\n\n/**\n * TODO figure out what to do about this\n * \n * @param {string} path path to resource\n */\nexport default function(path) {\n    if (!DEVELOPMENT) {\n        const alt = `${homepage}${path}`;\n        console.log(`resource: replacing ${path} with ${alt}`, { DEVELOPMENT });\n        return alt;\n    }\n    return path;\n}\n","import Papa from 'papaparse';\n\nimport resource from './resource';\n\n/**\n * Downloads given CSV file.\n * \n * @param {string} url csv file\n */\nexport default async function(url, opts = {\n  onStep: undefined,\n  notResource: false,\n}) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(opts.notResource ? url : resource(url), {\n      // worker: true,\n      header: true,\n      quotes: false,\n      delimiter: ',',\n      download: true,\n      error: (err) => {\n        console.error(`fetchCsv: error on ${url}`, { err });\n        reject(err.message);\n      },\n      complete: (res) => {\n        if (res.errors.length > 0) {\n          return reject(res.errors[0]);\n        }\n        resolve(res.data);\n      },\n    });\n  })\n}\n","import resource from './resource';\n\n/**\n * Downloads JSON asset\n * \n * @param {string} url resource to fetch\n */\nexport default async function(url, opts = {\n    notResource: false,\n}) {\n    try {\n        const resp = await fetch(opts.notResource ? url : resource(url), {\n            method: 'GET',\n            mode: 'no-cors',\n        });\n        return resp.json();\n    } catch (err) {\n        console.error(`fetchJSON: error on ${url}`, err);\n        throw err;\n    }\n}\n","import React, { useState, useEffect } from 'react';\n\nfunction SingleLoader({ children, context }) {\n  const [data, setData] = useState({ loading: true })\n\n  useEffect(() => {\n    let cancel = false;\n    async function loadFunc() {\n      console.log(`${context.displayName}: loading...`);\n      try {\n        const data = await context.loadValue();\n        if (cancel) { return; }\n        setData({ loading: false, ...data });\n        console.log(`${context.displayName}: ok, updated`);\n      } catch(err) {\n        console.log(`${context.displayName}: err, updated`);\n        setData({ loading: false, err });\n      }\n    }\n    loadFunc();\n\n    return () => { cancel = true; }\n  }, [context])\n\n  return <context.Provider value={data} children={children}/>;\n}\n\nSingleLoader.defaultValue = { loading: true, err: undefined };\n\nexport default SingleLoader;\n","import React from 'react';\n\nimport { YEARS } from '../vars';\n\nimport { fetchCSV, fetchJSON } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n  regions: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.acs';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/acs/timeseries_flat.csv',\n    '/_data/acs/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n\n  const regionFetches = YEARS.map((f) => fetchJSON(`/_data/acs/regions/${f}_geojson.json`));\n  const regionResults = await Promise.all(regionFetches);  \n\n  const results = await Promise.all(fetches);\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n    regions: regionResults,\n  }\n}\n\nexport default Context;\n","import React from 'react';\n\nimport { YEARS } from '../vars';\n\nimport { fetchCSV, fetchJSON } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n  stations: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.epa';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/epa/timeseries_flat.csv',\n    '/_data/epa/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n  const results = await Promise.all(fetches);\n\n  const stationFetches = YEARS.map((f) => fetchJSON(`/_data/epa/stations/${f}_geojson.json`));\n  const stationResults = await Promise.all(stationFetches);  \n\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n    stations: stationResults,\n  }\n}\n\nexport default Context;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nfunction SlideLayout({ children, footer }) {\n  return (\n    <Layout style={{height:\"100%\", background:'transparent'}}>\n      <Layout.Content style={{height:\"100%\", padding:'48px'}}>\n        {children}\n      </Layout.Content>\n      {footer ? <Layout.Footer style={{background:'transparent'}}>{footer}</Layout.Footer> : undefined}\n    </Layout>\n  );\n}\n\nexport default SlideLayout;\n","import React from 'react';\nimport { Row, Col, Typography, Avatar, Space, Alert } from 'antd';\nimport { ExperimentTwoTone } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { geoidToColor, VIEW_STATES } from '../vars';\nimport EPAContext from '../contexts/EPAContext';\nimport ACSContext from '../contexts/ACSContext';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Text, Title } = Typography;\n\nconst main = (\n  <Space direction=\"vertical\" size=\"large\" style={{ padding: '48px' }}>\n    <Avatar size=\"large\" icon={<ExperimentTwoTone />} /> \n    <Typography>\n      <Title>Society and Air Quality</Title>\n      <Text>EOSC 410 Final Project</Text> | <Text type=\"secondary\">University of British Columbia, April 2020</Text>\n    </Typography>\n  </Space>\n)\n\nfunction IntroSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        // wait for ACS data - since this is the intro slide, we want to make sure *all* data is\n        // available\n        return (\n          <ACSContext.Consumer>\n            {(acs) => {\n              const isLoading = acs.loading || epa.loading\n              const isDataLoaded = !isLoading && !acs.err && !epa.err;\n\n              if (isDataLoaded && isSlideSelected) {\n                updateMapState({\n                  viewState: VIEW_STATES.INITAL,\n                  layers: [\n                    new GeoJsonLayer({\n                      id: 'intro-epa-layer',\n                      data: epa.stations[epa.stations.length-1],\n                      pointRadiusMinPixels: 3,\n                      getFillColor: (d) => {\n                        const { properties: { acs_geoid: geoid } } = d;\n                        return geoidToColor(geoid);\n                      },\n                    }),\n                  ],\n                });\n              }\n\n              return (\n                <SlideLayout>\n                  <Row>\n                    <Col span={4} offset={20}>\n                      <Space direction=\"vertical\">\n                        {isLoading ? <Alert message=\"Loading data...\" type=\"info\" /> : undefined}\n                        {isDataLoaded ? <Alert message={'Presentation data is ready!'} type=\"success\" showIcon /> : undefined}\n\n                        {(!isLoading && acs.err)\n                          ? <Alert message=\"Error occured when loading ACS data\" description={acs.err.message} type=\"error\" showIcon /> \n                          : undefined}\n                        {(!isLoading && epa.err)\n                          ? <Alert message=\"Error occured when loading EPA data\" description={epa.err.message} type=\"error\" showIcon />\n                          : undefined}\n                      </Space>\n                    </Col>\n                  </Row>\n                  {main}\n                </SlideLayout>\n              )\n            }}\n          </ACSContext.Consumer>\n        )\n      }}\n    </EPAContext.Consumer>\n  );\n}\n\nIntroSlide.footerText = 'by Robert Lin and Angelene Leow';\n\nexport default IntroSlide;\n","import React from 'react';\nimport { Card, Row, Col, Typography, Timeline, Space } from 'antd';\nimport { FilterTwoTone, FundTwoTone, QuestionCircleFilled } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { geoidToColor, VIEW_STATES } from '../vars';\n\nimport ACSContext from '../contexts/ACSContext';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Text } = Typography;\n\nconst questionsContent = [\n  {\n    text: (<Text strong>\n      As cities grow, we undoubtedly make a significant impact on the environment. We want to explore\n      the relationship between society and the world around us.\n    </Text>),\n    icon: <QuestionCircleFilled style={{ fontSize: '24px' }} />,\n    color: 'green',\n  },\n  {\n    text: 'Are there any correlations between societal metrics and air quality indicators?',\n    icon: <FilterTwoTone />,\n  },\n  {\n    text: 'Can we leverage metrics that measure changes in society to predict changes in air quality?',\n    icon: <FundTwoTone />,\n  },\n];\n\nconst questions = (\n  <Timeline>\n    {questionsContent.map((q) => (\n      <Timeline.Item dot={q.icon} color={q.color}>{q.text}</Timeline.Item>\n    ))}\n  </Timeline>\n)\n\nfunction QuestionsSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <ACSContext.Consumer>\n      {(acs) => {\n        if (!acs.loading && !acs.err && isSlideSelected) {\n          const { timeseriesFlat, regions } = acs;\n          updateMapState({\n            viewState: VIEW_STATES.US_LEFT,\n            layers: [\n              new GeoJsonLayer({\n                id: 'questions-acs-layer',\n                data: regions[regions.length-1],\n                pointRadiusMinPixels: 3,\n                getFillColor: (d) => geoidToColor(d.properties.geoid),\n                getLineColor: [255, 255, 255],\n                getElevation: (d) => {\n                  const { properties: { geoid } } = d;\n                  const pop = timeseriesFlat[timeseriesFlat.length-1][`${geoid}.acs.total_pop`] || 0;\n                  return Math.sqrt(pop) * 100;\n                },\n                opacity: 0.8,\n                stroked: false,\n                filled: true,\n                extruded: true,\n                wireframe: true,\n              }),\n            ]\n          });\n        }\n        return (\n          <SlideLayout>\n            <Row>\n              <Col span={8} offset={16}>\n                <Space direction=\"vertical\">\n                    <Card title=\"Research Questions\" bordered={false}>\n                    {questions}\n                    </Card>\n                </Space>\n              </Col>\n            </Row>\n          </SlideLayout>\n        )\n      }}\n    </ACSContext.Consumer>\n  );\n}\n\nQuestionsSlide.footerText = 'Simplified ACS CBSA regional boundaries, with heights representing total population'\n\nexport default QuestionsSlide;\n","import React from 'react';\nimport { Card, Row, Col, Avatar, List } from 'antd';\nimport { TeamOutlined, RocketOutlined, PoundOutlined } from '@ant-design/icons';\n\nimport { VIEW_STATES } from '../../vars';\nimport SlideLayout from '../../components/SlideLayout';\n\nconst focusFeaturesContent = [\n  {\n    icon: <TeamOutlined />,\n    title: 'Population Traits',\n    description: 'This includes features like total population, median age, household types, and education.',\n  },\n  {\n    icon: <RocketOutlined />,\n    title: 'Commuting Habits',\n    description: 'The ACS collects information on how people get to work, and how long they take to do so.',\n  },\n  {\n    icon: <PoundOutlined />,\n    title: 'Economic Situations',\n    description: 'We want to explore if income inequality, poverty rates, and rent burden of the population has any significance in air quality changes.',\n  }\n];\nconst focusFeatures = (\n  <List itemLayout=\"horizontal\" dataSource={focusFeaturesContent} renderItem={(f) => (\n    <List.Item>\n      <List.Item.Meta\n        avatar={f.icon ? <Avatar icon={f.icon}/> : undefined}\n        title={f.title}\n        description={f.description}/>\n    </List.Item>\n  )} />\n)\n\nfunction Slide({ updateMapState, isSlideSelected }) {\n  if (isSlideSelected) {\n    const viewState = { ...VIEW_STATES.US_RIGHT };\n    viewState.zoom -= 0.25;\n    viewState.latitude -= 16;\n    viewState.longitude -= 20;\n    updateMapState({ viewState });\n  }\n\n  return (\n    <SlideLayout footer={(\n      <Row>\n        <Col offset={16} span={8} style={{ height: '100%' }}>\n          <Card bordered={false} style={{ float: 'right', marginTop: 'auto' }}>\n            <Card.Meta\n              title=\"CBSA Regions\"\n              description={'CBSA stands for \"core-based statistical area\" and is defined as an area anchored '\n              + 'around an urban center of at least 10,000 people. They are identified by distinct GeoIDs, '\n              + 'which we\\'ll be using throughout this project.'}\n            />\n          </Card>\n        </Col>\n      </Row>\n    )}>\n      <Row gutter={32} style={{ height: '100%' }}>\n        <Col span={12}>\n          <Card title=\"Data: The American Community Survey (ACS)\" bordered={false}>\n<p>\nThe <a href=\"https://www.census.gov/programs-surveys/acs\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey</a>,\nprovided by the United States Census Bureau, \"provides vital information on a yearly basis about\nthe United States and its people by contacting over 3.5 million households across the country”.\nThis data is used for determining US federal and state funding and is openly available on Google BigQuery.\n</p>\n<p>\nThe dataset provides a huge variety of metrics, though we'll be focusing on the following areas for\nthis project:\n</p>\n{focusFeatures}\n          </Card>\n        </Col>\n      </Row>\n    </SlideLayout>\n  )\n}\n\nSlide.footerText = 'Simplified ACS CBSA regional boundaries, with heights representing total population'\n\nexport default Slide;\n","import React, { useState } from 'react';\nimport { Card, Row, Col, Typography, Space, Spin, Select, Slider } from 'antd';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { geoidToColor, getYearsMarks, YEARS, REGIONS, ACS_FEATURES } from '../../vars';\nimport ACSContext from '../../contexts/ACSContext';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Text, Title } = Typography;\n\nfunction Slide({ slideID, updateMapState, isSlideSelected }) {\n  const [visState, setVisState] = useState({\n    year: 0,\n    feature: ACS_FEATURES.POV,\n    geoid: REGIONS.NY.geoid,\n  });\n\n  return (\n    <ACSContext.Consumer>\n      {(acs) => {\n        if (acs.loading || acs.err) return <Spin/>;\n        const { timeseriesFlat, regions } = acs;\n\n        if (isSlideSelected) {\n          updateMapState({\n            layers: [\n              new GeoJsonLayer({\n                id: `data-acs-layer-${visState.year}-${visState.feature}-${visState.region}`,\n                data: regions[visState.year],\n                pointRadiusMinPixels: 3,\n                getFillColor: (d) => {\n                  const { properties: { geoid } } = d;\n                  if (geoid === visState.geoid) return [255,255,0];\n                  return geoidToColor(geoid)\n                },\n                getLineColor: [255, 255, 255],\n                getElevation: (d) => {\n                  const { properties: { geoid } } = d;\n                  const pop = timeseriesFlat[visState.year][`${geoid}.acs.${visState.feature}`] || 0;\n                  return Math.sqrt(pop) * 100;\n                },\n                opacity: 0.8,\n                stroked: false,\n                filled: true,\n                extruded: true,\n                wireframe: true,\n              }),\n            ]\n          },\n          // updateID forces update but also causes infinite loop\n          // `${slideID}-${visState.year}-${visState.feature}-${visState.geoid}`\n          );\n        }\n\n        const region = acs.regions[visState.year].features.find((v) => v.properties.geoid === visState.geoid);\n        const { properties: { name: regionName } } = region;\n\n        const chartData = [{\n          id: `ts-${visState.geoid}`,\n          data:  timeseriesFlat\n            .map((v, i) => ({\n              x: YEARS[i],\n              y: parseFloat(v[`${visState.geoid}.acs.${visState.feature}`]),\n            })),\n        }];\n\n        return (\n          <SlideLayout>\n            <Row>\n              <Col span={12}>\n                <Space direction=\"vertical\">\n                  <Card title=\"Data: The American Community Survey (ACS)\" bordered={false}>\n\n                    <p>\n                    <Title level={4}>Region</Title>\n                    <Select\n                      labelInValue\n                      defaultValue={{ key: REGIONS.NY.geoid }}\n                      style={{ width: 400 }}\n                      onChange={(v) => setVisState({ ...visState, geoid: v.key })}\n                    >\n                      <Select.Option value={REGIONS.SF.geoid}>{REGIONS.SF.name}</Select.Option>\n                      <Select.Option value={REGIONS.NY.geoid}>{REGIONS.NY.name}</Select.Option>\n                      <Select.Option value={REGIONS.AU.geoid}>{REGIONS.AU.name}</Select.Option>\n                    </Select>\n                    </p>\n\n                    <p>\n                    <Title level={4}>Feature</Title>\n                    <Select\n                      labelInValue\n                      defaultValue={{ key: ACS_FEATURES.POV }}\n                      style={{ width: 400 }}\n                      onChange={(v) => setVisState({ ...visState, feature: v.key})}\n                    >\n                      <Select.Option value={ACS_FEATURES.POP}>{ACS_FEATURES.POP}</Select.Option>\n                      <Select.Option value={ACS_FEATURES.GINI}>{ACS_FEATURES.GINI}</Select.Option>\n                      <Select.Option value={ACS_FEATURES.POV}>{ACS_FEATURES.POV}</Select.Option>\n                      <Select.Option value={ACS_FEATURES.TRANSIT}>{ACS_FEATURES.TRANSIT}</Select.Option>\n                    </Select>\n                    </p>\n\n                    {/* TODO Causes infinite state update loop with current architecture. Need to redesign.                   \n                    <Title level={4}>Year</Title>\n                    <Slider min={0} max={YEARS.length-1} marks={getYearsMarks()} defaultValue={0} step={1} included={false}\n                      onChange={(v) => setVisState({ ...visState, year: v })} />\n                    */}\n                  </Card>\n\n                  <Card  bordered={false}>\n                    <Title level={3}>{regionName}</Title>\n                    <Text strong>{`GeoID ${visState.geoid} | Feature ${visState.feature}`}</Text>\n                    <br />\n                    <div style={{ height: 300, width: 500 }}>\n                      <ResponsiveLine\n                        data={chartData}\n                        xScale={{ type: 'point' }}\n                        yScale={{ type: 'linear' }}\n\n                        axisBottom={{ legend: 'year' }}\n                        axisLeft={{ legend: `${visState.feature}` }}\n                        enableGridY={false}\n\n                        margin={{ top: 50, right: 60, bottom: 50, left: 60 }}\n                        colors={{ scheme: 'dark2' }}\n                        enableCrosshair\n                        isInteractive\n                        />\n                    </div>\n                  </Card>\n                </Space>\n              </Col>\n            </Row>\n          </SlideLayout>\n        )\n      }}\n    </ACSContext.Consumer>\n  );\n}\n\nSlide.footerText = 'Simplified ACS CBSA regional boundaries, with heights representing the selected metric'\n\nexport default Slide;\n","import React from 'react';\nimport { Card, Row, Col, Avatar, List, Spin } from 'antd';\nimport { HeartOutlined, AreaChartOutlined } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { VIEW_STATES, geoidToColor } from '../../vars';\nimport SlideLayout from '../../components/SlideLayout';\nimport EPAContext from '../../contexts/EPAContext';\n\nconst focusFeaturesContent = [\n  {\n    icon: <HeartOutlined />,\n    title: 'Acceptable PM2.5 AQI & Speciation Mass',\n    description: 'The Air Quality Index (AQI) is used to provide pollution estimates - needless to say, a very representative metric for this project.',\n  },\n  {\n    icon: <AreaChartOutlined />,\n    title: 'Average Ambient Temperature',\n    description: 'Although the time span of 12 years is very short, we want to explore what trends might exist in this metric.',\n  }\n];\nconst focusFeatures = (\n  <List itemLayout=\"horizontal\" dataSource={focusFeaturesContent} renderItem={(f) => (\n    <List.Item>\n      <List.Item.Meta\n        avatar={f.icon ? <Avatar icon={f.icon}/> : undefined}\n        title={f.title}\n        description={f.description}/>\n    </List.Item>\n  )} />\n)\n\nfunction Slide({ updateMapState, isSlideSelected }) {\n  if (isSlideSelected) {\n    const viewState = { ...VIEW_STATES.US_RIGHT };\n    viewState.zoom -= 0.25;\n    viewState.latitude -= 16;\n    viewState.longitude -= 20;\n    updateMapState({ viewState });\n  }\n\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        if (epa.loading || epa.err) return <Spin/>;\n        const { stations } = epa;\n\n        if (isSlideSelected) {\n          const viewState = { ...VIEW_STATES.US_RIGHT };\n          viewState.zoom -= 0.25;\n          viewState.latitude -= 10;\n          viewState.longitude -= 20;\n          viewState.pitch = 0;\n          viewState.bearing = 0;\n          updateMapState({\n            viewState,\n            layers: [\n              new GeoJsonLayer({\n                id: 'data-epa-layer',\n                data: stations[stations.length-1],\n                pointRadiusMinPixels: 4,\n                getFillColor: (d) => {\n                  const { properties: { acs_geoid: geoid } } = d;\n                  return geoidToColor(geoid);\n                },\n              }),\n            ],\n          });\n        }\n\n        return (\n          <SlideLayout footer={(\n            <Row>\n              <Col offset={16} span={8} style={{ height: '100%' }}>\n                <Card bordered={false} style={{ float: 'right', marginTop: 'auto' }}>\n                  <Card.Meta\n                    title=\"CBSA Regions\"\n                    description={'To align the ACS and EPA datasets, we categorized each station by the CBSA they belong in, demonstrated in this visualization.'}\n                  />\n                </Card>\n              </Col>\n            </Row>\n          )}>\n            <Row gutter={32} style={{ height: '100%' }}>\n              <Col span={12}>\n                <Card title=\"Data: Historical Air Quality (EPA)\" bordered={false}>\n<p>\nThe <a href=\"https://console.cloud.google.com/marketplace/details/epa/historical-air-quality?filter=solution-type%3Adataset&filter=category%3Ascience-research&id=198c2178-3986-4182-a7c7-4c9ae81dfc5d\" target=\"_blank\" rel=\"noopener noreferrer\">Historical Air Quality dataset</a>,\nprovided by the Environmental Protection Agency (EPA), which contains \"annual summary data as well as\nhourly and daily data in the categories of criteria gases, particulates, meteorological, and toxics\".\nIt is openly available on Google BigQuery.\n</p>\n<p>\nThe dataset also provides a huge variety of measurements, though unfortunately, due to adjustments\nin collection methods over time, very few metrics have been consistently measured over the years.\nBecasue of this, we've decided to focus on the following features of the EPA dataset this project:\n</p>\n{focusFeatures}\n                </Card>\n              </Col>\n            </Row>\n          </SlideLayout>\n        )\n      }}\n    </EPAContext.Consumer>\n  )\n}\n\nSlide.footerText = 'Relevant EPA measurement sites, colored by the CBSA they belong in'\n\nexport default Slide;\n","import React, { useState } from 'react';\nimport { Card, Row, Col, Typography, Space, Spin, Select, Slider } from 'antd';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { geoidToColor, YEARS, REGIONS, EPA_FEATURES } from '../../vars';\nimport EPAContext from '../../contexts/EPAContext';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Text, Title } = Typography;\n\nfunction Slide({ slideID, updateMapState, isSlideSelected }) {\n  const [visState, setVisState] = useState({\n    year: 0,\n    feature: EPA_FEATURES.PM.code,\n    geoid: REGIONS.NY.geoid,\n  });\n\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        if (epa.loading || epa.err) return <Spin/>;\n        const { timeseriesFlat, stations } = epa;\n\n        if (isSlideSelected) {\n          updateMapState({\n            layers: [\n              new GeoJsonLayer({\n                id: `data-epa-layer-${visState.year}-${visState.feature}-${visState.region}`,\n                data: stations[visState.year],\n                pointRadiusMinPixels: 4,\n                getFillColor: (d) => {\n                  const { properties: { acs_geoid: geoid } } = d;\n                  if (`${geoid}` === visState.geoid) return [255,255,0];\n                  return geoidToColor(geoid)\n                },\n                getLineColor: [255, 255, 255],\n                opacity: 0.8,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n              }),\n            ]\n          },\n          // updateID forces update but also causes infinite loop\n          // `${slideID}-${visState.year}-${visState.feature}-${visState.geoid}`\n          );\n        }\n\n        const station = stations[visState.year].features.find((v) => `${v.properties.acs_geoid}` === visState.geoid);\n        const { properties: { acs_cbsa_name: regionName } } = station;\n\n        const stationsTimeseries = {};\n        timeseriesFlat.forEach((row, i) => {\n          Object.keys(row).forEach((col) => {\n            if (col.startsWith(visState.geoid) && col.endsWith(`${visState.feature}.mean`)) {\n              const parts = col.split('.');\n              const stationID = `${parts[2]}.${parts[3]}.${parts[4]}`;\n              if (!stationsTimeseries[stationID]) stationsTimeseries[stationID] = [];\n              const v = parseFloat(row[col]);\n              if (!isNaN(v)) {\n                stationsTimeseries[stationID].push({\n                  x: YEARS[i],\n                  y: v,\n                });\n              }\n            }\n          })\n        })\n        const chartData = Object.keys(stationsTimeseries).map((ts) => ({\n          id: `ts-${visState.geoid}-${ts}`,\n          data: stationsTimeseries[ts],\n        }));\n\n        return (\n          <SlideLayout>\n            <Row>\n              <Col span={12}>\n                <Space direction=\"vertical\">\n                  <Card title=\"Data: Historical Air Quality (EPA)\" bordered={false}>\n\n                    <p>\n                    <Title level={4}>Region</Title>\n                    <Select\n                      labelInValue\n                      defaultValue={{ key: REGIONS.NY.geoid }}\n                      style={{ width: 400 }}\n                      onChange={(v) => setVisState({ ...visState, geoid: v.key })}\n                    >\n                      <Select.Option value={REGIONS.SF.geoid}>{REGIONS.SF.name}</Select.Option>\n                      <Select.Option value={REGIONS.NY.geoid}>{REGIONS.NY.name}</Select.Option>\n                      <Select.Option value={REGIONS.AU.geoid}>{REGIONS.AU.name}</Select.Option>\n                    </Select>\n                    </p>\n\n                    <p>\n                    <Title level={4}>Feature</Title>\n                    <Select\n                      labelInValue\n                      defaultValue={{ key: EPA_FEATURES.PM.code }}\n                      style={{ width: 400 }}\n                      onChange={(v) => setVisState({ ...visState, feature: v.key})}\n                    >\n                      <Select.Option value={EPA_FEATURES.PM.code}>{EPA_FEATURES.PM.name}</Select.Option>\n                      <Select.Option value={EPA_FEATURES.TEMP.code}>{EPA_FEATURES.TEMP.name}</Select.Option>\n                    </Select>\n                    </p>\n\n                    {/* TODO Causes infinite state update loop with current architecture. Need to redesign.                   \n                    <Title level={4}>Year</Title>\n                    <Slider min={0} max={YEARS.length-1} marks={getYearsMarks()} defaultValue={0} step={1} included={false}\n                      onChange={(v) => setVisState({ ...visState, year: v })} />\n                    */}\n                  </Card>\n\n                  <Card  bordered={false}>\n                    <Title level={3}>{regionName}</Title>\n                    <Text strong>{`GeoID ${visState.geoid} | Feature ${visState.feature}`}</Text>\n                    <br />\n                    <div style={{ height: 300, width: 500 }}>\n                      <ResponsiveLine\n                        data={chartData}\n                        xScale={{ type: 'point' }}\n                        yScale={{ type: 'linear', min: 0 }}\n\n                        axisBottom={{ legend: 'year' }}\n                        axisLeft={{ legend: `${visState.feature} means` }}\n                        enableGridY={false}\n\n                        margin={{ top: 50, right: 60, bottom: 50, left: 60 }}\n                        colors={{ scheme: 'dark2' }}\n                        enableCrosshair\n                        isInteractive\n                        />\n                    </div>\n                  </Card>\n                </Space>\n              </Col>\n            </Row>\n          </SlideLayout>\n        )\n      }}\n    </EPAContext.Consumer>\n  );\n}\n\nSlide.footerText = 'Relevant EPA measurement sites, colored by the CBSA they belong in'\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nSlide.footerText = 'TODO link to github';\n\nexport default Slide;\n","import React, { useRef, useState } from 'react';\nimport { Carousel, Layout, Button, Row, Col, Typography } from 'antd';\nimport { ArrowRightOutlined, ArrowLeftOutlined } from '@ant-design/icons';\n\nimport './App.css';\n\n// contexts for data\nimport ACSContext from './contexts/ACSContext';\nimport EPAContext from './contexts/EPAContext';\nimport SingleLoader from './contexts/SingleLoader';\n\n// slideshow components\nimport Intro from './slides/Intro';\nimport Questions from './slides/Questions';\nimport MethodologyDataACS from './slides/methodology/DataACS';\nimport MethodologyDataACSExplorer from './slides/methodology/DataACSExplorer';\nimport MethodologyDataEPA from './slides/methodology/DataEPA';\nimport MethodologyDataEPAExplorer from './slides/methodology/DataEPAExplorer';\nimport MethodologyAnalysis from './slides/methodology/Analysis';\nimport End from './slides/End';\n\n// map\n// import Map from './maps/Map';\nimport DeckGL from '@deck.gl/react';\nimport { LinearInterpolator } from '@deck.gl/core';\nimport { StaticMap } from 'react-map-gl';\nimport { MAPBOX_API_TOKEN, VIEW_STATES } from './vars';\n\nconst mapStyles = {\n  MAPBOX_DARK: 'mapbox://styles/mapbox/dark-v9',\n  DARK: 'mapbox://styles/bobhead/ck8pf7npv0cda1iobxo3txanr',\n};\n\nconst mapMoveInterpolator = new LinearInterpolator(['bearing']);\n\nconst slides = [\n  Intro,\n  Questions,\n  MethodologyDataACS,\n  MethodologyDataACSExplorer,\n  MethodologyDataEPA,\n  MethodologyDataEPAExplorer,\n  MethodologyAnalysis,\n  End,\n];\n\nconst { Text } = Typography; \n\nfunction App() {\n  // map state\n  const [mapState, setMapState] = useState({\n    prevUpdateID: -1,\n\n    viewState: {\n      ...VIEW_STATES.INITAL,\n      transitionDuration: 1000,\n      transitionInterpolator: mapMoveInterpolator,\n    },\n    layers: [],\n\n    mapStyle: 'DARK',\n  });\n\n  // slides\n  const [slideID, setSlide] = useState(0);\n  const slider = useRef();\n  const carouselNodes = slides.map((S, id) => <S\n    slideID={id}\n    isSlideSelected={id === slideID}\n    updateMapState={(s, updateID) => {\n      const stateUpdateID = updateID || id;\n      // TODO making mapState a dependency of carousel causes infinite loops.\n      if (stateUpdateID !== mapState.prevUpdateID) {\n        setMapState({\n          prevUpdateID: stateUpdateID,\n          // recycle prev config if possible\n          layers: s.layers || mapState.layers, \n          viewState: s.viewState ? {\n            ...mapState.viewState,\n            ...s.viewState,\n            // why won't this work :(\n            transitionDuration: 1000,\n            transitionInterpolator: mapMoveInterpolator,\n          } : mapState.viewState,\n        });\n      } else {\n        console.log(`discarding map update ${stateUpdateID}`);\n      }\n    }}\n  />)\n\n  return (\n    <Layout style={{ height:\"100vh\"}}>\n      <Layout.Content style={{ height:\"100%\" }}>\n        <DeckGL\n          viewState={mapState.viewState}\n          layers={mapState.layers}>\n          <StaticMap\n              viewState={mapState.viewState}\n              mapStyle={mapStyles.DARK}\n              reuseMaps\n              preventStyleDiffing\n              mapboxApiAccessToken={MAPBOX_API_TOKEN} />\n        </DeckGL>\n\n        <SingleLoader context={ACSContext}>\n          <SingleLoader context={EPAContext}>\n            <Carousel\n              ref={ref => { slider.current = ref; }}\n              style={{ height: \"100%\" }}\n              dotPosition=\"top\"\n              beforeChange={(_, to) => { setSlide(to); }}\n              children={carouselNodes} />\n          </SingleLoader>\n        </SingleLoader>\n      </Layout.Content>\n\n      <Layout.Footer>\n        <Row justify=\"space-between\" type=\"flex\" align=\"middle\">\n          <Col span={4}>\n            {slideID > 0\n              ? <Button type=\"primary\" shape=\"round\" icon={<ArrowLeftOutlined />} size=\"large\"\n                  onClick={() => { slider.current.prev() }}/>\n              : undefined}\n          </Col>\n          <Col span={8} style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            verticalAlign: \"middle\",\n            textAlign: \"center\"\n          }} offset={slideID > 0 ? 0 : 4}>\n            <Text type=\"secondary\" style={{ verticalAlign: \"middle\", alignItems: \"center\", textAlign: \"center\" }}>\n              {slides[slideID].footerText}\n            </Text>\n          </Col>\n          <Col span={4} >\n            <Button type=\"primary\" shape=\"round\" icon={<ArrowRightOutlined />} size=\"large\" style={{ float: 'right' }}\n              onClick={() => { slider.current.next() }}/>\n          </Col>\n        </Row>\n      </Layout.Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}