{"version":3,"sources":["contexts/lib/fetchCSV.js","contexts/lib/fetchJSON.js","contexts/SingleLoader.js","contexts/ACSContext.js","vars.js","contexts/EPAContext.js","maps/Map.js","components/SlideLayout.js","slides/Intro.js","slides/Questions.js","slides/methodology/Data.js","slides/methodology/Processing.js","slides/methodology/Analysis.js","slides/End.js","App.js","serviceWorker.js","index.js"],"names":["url","a","opts","onStep","undefined","Promise","resolve","reject","Papa","parse","worker","header","step","error","err","console","message","complete","res","data","fetch","method","mode","resp","json","SingleLoader","children","context","useState","loading","setData","useEffect","cancel","log","displayName","loadValue","loadFunc","Provider","value","defaultValue","Context","React","createContext","timeseriesFlat","timeseriesVert","fetches","map","f","fetchCSV","all","results","YEARS","stationGeoToColor","d","gid","properties","acs_geoid","geoid","parseInt","substring","stations","stationFetches","fetchJSON","stationResults","initialViewState","longitude","latitude","zoom","pitch","bearing","mapStyles","Map","layers","viewState","transitionDuration","transitionInterpolator","FlyToInterpolator","reuseMaps","preventStyleDiffing","mapStyle","mapboxApiAccessToken","process","style","zIndex","SlideLayout","minHeight","background","Content","padding","Text","Title","main","direction","size","icon","ExperimentTwoTone","type","IntroSlide","updateMapState","isSlideSelected","EPAContext","Consumer","epa","ACSContext","acs","isLoading","isDataLoaded","GeoJsonLayer","id","length","pointRadiusMinPixels","getFillColor","span","offset","showIcon","footerText","QuestionsSlide","gutter","title","bordered","Slide","App","prevUpdateID","hideMapLayer","mapState","setMapState","slideID","setSlide","slider","useRef","slides","Intro","Questions","MethodologyData","MethodologyProcessing","MethodologyAnalysis","End","carouselNodes","S","s","updateID","stateUpdateID","ref","current","dotPosition","beforeChange","_","to","Footer","justify","shape","ArrowLeftOutlined","onClick","prev","ArrowRightOutlined","float","next","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8ae2bfb5.chunk.js","sourcesContent":["import Papa from 'papaparse';\n\n/**\n * Downloads given CSV file.\n * \n * @param {string} url csv file\n */\nexport default async function(url, opts = {\n  onStep: undefined,\n}) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      worker: true,\n      header: true,\n      step: opts.onStep,\n      error: (err) => {\n        console.error(`fetchCsv: error on ${url}`, { err });\n        reject(err.message);\n      },\n      complete: (res) => {\n        resolve(res.data);\n      },\n    });\n  })\n}\n","/**\n * Downloads JSON asset\n * \n * @param {string} url resource to fetch\n */\nexport default async function(url) {\n    try {\n        const resp = await fetch(url, {\n            method: 'GET',\n            mode: 'no-cors',\n        });\n        return resp.json();\n    } catch (err) {\n        console.error(`fetchJSON: error on ${url}`, err);\n        throw err;\n    }\n}\n","import React, { useState, useEffect } from 'react';\n\nfunction SingleLoader({ children, context }) {\n  const [data, setData] = useState({ loading: true })\n\n  useEffect(() => {\n    let cancel = false;\n    async function loadFunc() {\n      console.log(`${context.displayName}: loading...`);\n      try {\n        const data = await context.loadValue();\n        if (cancel) { return; }\n        setData({ loading: false, ...data });\n        console.log(`${context.displayName}: ok, updated`);\n      } catch(err) {\n        console.log(`${context.displayName}: err, updated`);\n        setData({ loading: false, err });\n      }\n    }\n    loadFunc();\n\n    return () => { cancel = true; }\n  }, [context])\n\n  return <context.Provider value={data} children={children}/>;\n}\n\nSingleLoader.defaultValue = { loading: true, err: undefined };\n\nexport default SingleLoader;\n","import React from 'react';\n\nimport { fetchCSV } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.acs';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/acs/timeseries_flat.csv',\n    '/_data/acs/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n  const results = await Promise.all(fetches);\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n  }\n}\n\nexport default Context;\n","export const DEVELOPMENT = (process.env.NODE_ENV !== 'production');\nexport const YEARS = ['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'];\nexport const MAPBOX_API_TOKEN = process.env.REACT_APP_MAPBOX_API_TOKEN;\n\nexport function stationGeoToColor(d) {\n    const { properties: { acs_geoid: gid } } = d;\n    const geoid = `${gid}`;\n    return [\n        parseInt(geoid.substring(0, 1) + geoid.substring(4, 5)),\n        parseInt(geoid.substring(2, 4)),\n        parseInt(geoid.substring(4, 5) + geoid.substring(0, 1)),\n        255,\n    ];\n}\n","import React from 'react';\n\nimport { YEARS } from '../vars';\n\nimport { fetchCSV, fetchJSON } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n  stations: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.epa';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/epa/timeseries_flat.csv',\n    '/_data/epa/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n  const results = await Promise.all(fetches);\n\n  const stationFetches = YEARS.map((f) => fetchJSON(`/_data/epa/stations/${f}_geojson.json`));\n  const stationResults = await Promise.all(stationFetches);  \n\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n    stations: stationResults,\n  }\n}\n\nexport default Context;\n","import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { FlyToInterpolator } from '@deck.gl/core';\nimport StaticMap from 'react-map-gl';\n\nimport { MAPBOX_API_TOKEN } from '../vars';\n\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0,\n};\n\nconst mapStyles = {\n  MAPBOX_DARK: 'mapbox://styles/mapbox/dark-v9',\n  DARK: 'mapbox://styles/bobhead/ck8pf7npv0cda1iobxo3txanr',\n};\n\nfunction Map({\n  children,\n\n  layers = [],\n  viewState = initialViewState,\n}) {\n  return (\n    <DeckGL\n      initialViewState={initialViewState}\n      viewState={{\n        ...viewState,\n        transitionDuration: 3000,\n        transitionInterpolator: new FlyToInterpolator(),\n      }}\n      layers={layers}\n    >\n      <StaticMap\n        {...viewState}\n        reuseMaps\n        preventStyleDiffing={true}\n        mapStyle={mapStyles.DARK}\n        mapboxApiAccessToken={MAPBOX_API_TOKEN} />\n\n      <div style={{ zIndex: 1 }} children={children} />\n    </DeckGL>\n  )\n}\n\nMap.initialViewState = initialViewState;\n\nexport default Map;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nfunction SlideLayout({ children }) {\n  return (\n    <Layout style={{minHeight:\"100%\", background:'transparent'}}>\n      <Layout.Content style={{padding:'48px'}}>\n        {children}\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default SlideLayout;\n","import React from 'react';\nimport { Spin, Row, Col, Typography, Avatar, Space, Alert } from 'antd';\nimport { ExperimentTwoTone } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { stationGeoToColor } from '../vars';\nimport EPAContext from '../contexts/EPAContext';\nimport ACSContext from '../contexts/ACSContext';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Text, Title } = Typography;\n\nconst main = (\n  <Space direction=\"vertical\" size=\"large\" style={{ padding: '48px' }}>\n    <Avatar size=\"large\" icon={<ExperimentTwoTone />} /> \n    <Typography>\n      <Title>Society and Air Quality</Title>\n      <Text>EOSC 410 Final Project</Text> | <Text type=\"secondary\">University of British Columbia, April 2020</Text>\n    </Typography>\n  </Space>\n)\n\nfunction IntroSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        // wait for ACS data - since this is the intro slide, we want to make sure *all* data is\n        // available\n        return (\n          <ACSContext.Consumer>\n            {(acs) => {\n              const isLoading = acs.loading || epa.loading\n              const isDataLoaded = !isLoading && !acs.err && !epa.err;\n\n              if (isDataLoaded && isSlideSelected) {\n                updateMapState({\n                  layers: [\n                    new GeoJsonLayer({\n                      id: 'intro-epa-layer',\n                      data: epa.stations[epa.stations.length-1],\n                      pointRadiusMinPixels: 3,\n                      getFillColor: stationGeoToColor,\n                    }),\n                  ],\n                });\n              }\n\n              return (\n                <SlideLayout>\n                  <Row>\n                    <Col span={4} offset={20}>\n                    {isLoading ? <Alert message=\"Loading data...\" type=\"info\" icon={<div><Spin /></div>} /> : undefined}\n                    {isDataLoaded ? <Alert message={'Presentation data is ready!'} type=\"success\" showIcon /> : undefined}\n\n                    {(!isLoading && acs.err)? <Alert message={`Error occured when loading ACS data: ${acs.err.message}`} type=\"error\" showIcon /> : undefined}\n                    {(!isLoading && epa.err)? <Alert message={`Error occured when loading ACS data: ${epa.err.message}`} type=\"error\" showIcon /> : undefined}\n                    </Col>\n                  </Row>\n                  {main}\n                </SlideLayout>\n              )\n            }}\n          </ACSContext.Consumer>\n        )\n      }}\n    </EPAContext.Consumer>\n  );\n}\n\nIntroSlide.footerText = 'by Robert Lin and Angelene Leow';\n\nexport default IntroSlide;\n","import React from 'react';\nimport { Card, Row, Col, Typography, Avatar, Space } from 'antd';\nimport { QuestionOutlined } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { stationGeoToColor } from '../vars';\nimport EPAContext from '../contexts/EPAContext';\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Title, Text } = Typography;\n\nfunction QuestionsSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        if (isSlideSelected) {\n          updateMapState({\n            viewState: {\n              longitude: -98.5795,\n              latitude: 41.8283,\n              zoom: 3,\n              pitch: 0,\n              bearing: 0\n            },\n            layers: [\n              new GeoJsonLayer({\n                id: 'intro-epa-layer',\n                data: epa.stations[epa.stations.length-1],\n                pointRadiusMinPixels: 3,\n                getFillColor: stationGeoToColor,\n              }),\n            ]\n          });\n        }\n        return (\n          <SlideLayout>\n          <Row gutter={16}>\n            <Col span={8} offset={16}>\n              <Space direction=\"vertical\">\n                  <Card title=\"Questions\" bordered={false}>\n                    <Text>\n                      research questions, few sentences on the relevance of this study\n                    </Text>\n                  </Card>\n              </Space>\n            </Col>\n          </Row>\n        </SlideLayout>\n        )\n      }}\n    </EPAContext.Consumer>\n  );\n}\n\nexport default QuestionsSlide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nSlide.footerText = 'TODO link to github';\n\nexport default Slide;\n","import React, { useRef, useState } from 'react';\nimport { Carousel, Layout, Button, Row, Col, Typography } from 'antd';\nimport { ArrowRightOutlined, ArrowLeftOutlined } from '@ant-design/icons';\n\nimport './App.css';\n\n// contexts for data\nimport ACSContext from './contexts/ACSContext';\nimport EPAContext from './contexts/EPAContext';\nimport SingleLoader from './contexts/SingleLoader';\n\n// map\nimport Map from './maps/Map';\n\n// slideshow components\nimport Intro from './slides/Intro';\nimport Questions from './slides/Questions';\nimport MethodologyData from './slides/methodology/Data';\nimport MethodologyProcessing from './slides/methodology/Processing';\nimport MethodologyAnalysis from './slides/methodology/Analysis';\nimport End from './slides/End';\n\nconst { Text } = Typography; \n\nfunction App() {\n  // map state\n  const [mapState, setMapState] = useState({\n    prevUpdateID: -1,\n\n    viewState: Map.initialViewState,\n    layers: [],\n\n    mapStyle: 'DARK',\n    hideMapLayer: false,\n  });\n\n  // slides\n  const [slideID, setSlide] = useState(0);\n  const slider = useRef();\n  const slides = [\n    Intro,\n    Questions,\n    MethodologyData,\n    MethodologyProcessing,\n    MethodologyAnalysis,\n    End,\n  ];\n  const carouselNodes = slides.map((S, id) => <S\n    slideID={id}\n    isSlideSelected={id === slideID}\n    updateMapState={(s, updateID) => {\n      const stateUpdateID = (updateID | id);\n      if (stateUpdateID !== mapState.prevUpdateID) {\n        setMapState({ prevUpdateID: stateUpdateID, ...s });\n      }\n    }}\n  />)\n\n  // the entire app pretty much\n  const main = (\n    <Layout style={{minHeight:\"100vh\"}}>\n      <Layout.Content>\n        <Map {...mapState}>\n          <Carousel\n            ref={ref => { slider.current = ref; }}\n            style={{minHeight:\"100vh\"}}\n            dotPosition=\"top\"\n            beforeChange={(_, to) => { setSlide(to); }}\n            children={carouselNodes} />\n        </Map>\n      </Layout.Content>\n\n      <Layout.Footer>      \n        <Row justify=\"space-between\">\n          <Col span={8}>\n            {slideID > 0\n              ? <Button type=\"primary\" shape=\"round\" icon={<ArrowLeftOutlined />} size=\"large\"\n                  onClick={() => { slider.current.prev() }}/>\n              : undefined}\n          </Col>\n          <Col>\n            <Text type=\"secondary\">\n              {slides[slideID].footerText}\n            </Text>\n          </Col>\n          <Col span={8} >\n            {slideID < slides.length\n              ? <Button type=\"primary\" shape=\"round\" icon={<ArrowRightOutlined />} size=\"large\" style={{ float: 'right' }}\n                  onClick={() => { slider.current.next() }}/>\n              : undefined}\n          </Col>\n        </Row>\n      </Layout.Footer>\n    </Layout>\n  )\n\n  return (\n    <SingleLoader context={ACSContext}>\n      <SingleLoader context={EPAContext}>\n          {main}\n      </SingleLoader>\n    </SingleLoader>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}