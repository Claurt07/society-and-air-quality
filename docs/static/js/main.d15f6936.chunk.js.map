{"version":3,"sources":["vars.js","contexts/lib/resource.js","contexts/lib/fetchCSV.js","contexts/lib/fetchJSON.js","contexts/SingleLoader.js","contexts/ACSContext.js","contexts/EPAContext.js","maps/Map.js","components/SlideLayout.js","slides/Intro.js","slides/Questions.js","slides/methodology/Data.js","slides/methodology/Processing.js","slides/methodology/Analysis.js","slides/End.js","App.js","serviceWorker.js","index.js"],"names":["YEARS","geoidToColor","geoid","str","parseInt","substring","path","alt","console","log","DEVELOPMENT","process","url","a","opts","onStep","undefined","notResource","Promise","resolve","reject","Papa","parse","resource","header","quotes","delimiter","download","error","err","message","complete","res","errors","length","data","fetch","method","mode","resp","json","SingleLoader","children","context","useState","loading","setData","useEffect","cancel","displayName","loadValue","loadFunc","Provider","value","defaultValue","Context","React","createContext","timeseriesFlat","timeseriesVert","regions","fetches","map","f","fetchCSV","regionFetches","fetchJSON","all","regionResults","results","stations","stationFetches","stationResults","initialViewState","longitude","latitude","zoom","pitch","bearing","mapStyles","Map","layers","viewState","transitionDuration","transitionInterpolator","FlyToInterpolator","reuseMaps","preventStyleDiffing","mapStyle","mapboxApiAccessToken","style","zIndex","SlideLayout","minHeight","background","Content","padding","Text","Title","main","direction","size","icon","ExperimentTwoTone","type","IntroSlide","updateMapState","isSlideSelected","EPAContext","Consumer","epa","ACSContext","acs","isLoading","isDataLoaded","GeoJsonLayer","id","pointRadiusMinPixels","getFillColor","d","properties","acs_geoid","span","offset","showIcon","description","footerText","QuestionsSlide","getLineColor","getElevation","Math","sqrt","opacity","stroked","filled","extruded","wireframe","gutter","title","bordered","Slide","App","prevUpdateID","hideMapLayer","mapState","setMapState","slideID","setSlide","slider","useRef","slides","Intro","Questions","MethodologyData","MethodologyProcessing","MethodologyAnalysis","End","carouselNodes","S","s","updateID","stateUpdateID","ref","current","dotPosition","beforeChange","_","to","Footer","justify","align","shape","ArrowLeftOutlined","onClick","prev","display","alignItems","verticalAlign","textAlign","ArrowRightOutlined","float","next","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d15f6936.chunk.js","sourcesContent":["export const DEVELOPMENT = (process.env.NODE_ENV !== 'production');\nexport const YEARS = ['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'];\nexport const MAPBOX_API_TOKEN = process.env.REACT_APP_MAPBOX_API_TOKEN;\n\nexport function geoidToColor(geoid) {\n    const str = `${geoid}`; // 5-char string\n    return [\n        parseInt(`${str.substring(0, 1)}${str.substring(4, 5)}`),\n        parseInt(str.substring(2, 4)),\n        parseInt(`${str.substring(1, 2)}${str.substring(4, 5)}`),\n        255,\n    ];\n}\n","import { DEVELOPMENT } from '../../vars';\n\nconst rootPath = 'esoc410-project';\n\n/**\n * TODO figure out what to do about this\n * \n * @param {string} path path to resource\n */\nexport default function(path) {\n    if (!DEVELOPMENT) {\n        const alt = `/${rootPath}/${path}`;\n        console.log(`resource: replacing ${path} with ${alt}`, { DEVELOPMENT });\n        return alt;\n    }\n    return path;\n}\n","import Papa from 'papaparse';\n\nimport resource from './resource';\n\n/**\n * Downloads given CSV file.\n * \n * @param {string} url csv file\n */\nexport default async function(url, opts = {\n  onStep: undefined,\n  notResource: false,\n}) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(opts.notResource ? url : resource(url), {\n      // worker: true,\n      header: true,\n      quotes: false,\n      delimiter: ',',\n      download: true,\n      error: (err) => {\n        console.error(`fetchCsv: error on ${url}`, { err });\n        reject(err.message);\n      },\n      complete: (res) => {\n        if (res.errors.length > 0) {\n          return reject(res.errors[0]);\n        }\n        console.log(res);\n        resolve(res.data);\n      },\n    });\n  })\n}\n","import resource from './resource';\n\n/**\n * Downloads JSON asset\n * \n * @param {string} url resource to fetch\n */\nexport default async function(url, opts = {\n    notResource: false,\n}) {\n    try {\n        const resp = await fetch(opts.notResource ? url : resource(url), {\n            method: 'GET',\n            mode: 'no-cors',\n        });\n        return resp.json();\n    } catch (err) {\n        console.error(`fetchJSON: error on ${url}`, err);\n        throw err;\n    }\n}\n","import React, { useState, useEffect } from 'react';\n\nfunction SingleLoader({ children, context }) {\n  const [data, setData] = useState({ loading: true })\n\n  useEffect(() => {\n    let cancel = false;\n    async function loadFunc() {\n      console.log(`${context.displayName}: loading...`);\n      try {\n        const data = await context.loadValue();\n        if (cancel) { return; }\n        setData({ loading: false, ...data });\n        console.log(`${context.displayName}: ok, updated`);\n      } catch(err) {\n        console.log(`${context.displayName}: err, updated`);\n        setData({ loading: false, err });\n      }\n    }\n    loadFunc();\n\n    return () => { cancel = true; }\n  }, [context])\n\n  return <context.Provider value={data} children={children}/>;\n}\n\nSingleLoader.defaultValue = { loading: true, err: undefined };\n\nexport default SingleLoader;\n","import React from 'react';\n\nimport { YEARS } from '../vars';\n\nimport { fetchCSV, fetchJSON } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n  regions: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.acs';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/acs/timeseries_flat.csv',\n    '/_data/acs/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n\n  const regionFetches = YEARS.map((f) => fetchJSON(`/_data/acs/regions/${f}_geojson.json`));\n  const regionResults = await Promise.all(regionFetches);  \n\n  const results = await Promise.all(fetches);\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n    regions: regionResults,\n  }\n}\n\nexport default Context;\n","import React from 'react';\n\nimport { YEARS } from '../vars';\n\nimport { fetchCSV, fetchJSON } from './lib';\nimport SingleLoader from './SingleLoader';\n\nconst Context = React.createContext({\n  timeseriesFlat: null,\n  timeseriesVert: null,\n  stations: null,\n\n  ...SingleLoader.defaultValue,\n});\n\nContext.displayName = 'context.epa';\n\nContext.loadValue = async function() {\n  const fetches = [\n    '/_data/epa/timeseries_flat.csv',\n    '/_data/epa/timeseries_vert.csv',\n  ].map((f) => fetchCSV(f));\n  const results = await Promise.all(fetches);\n\n  const stationFetches = YEARS.map((f) => fetchJSON(`/_data/epa/stations/${f}_geojson.json`));\n  const stationResults = await Promise.all(stationFetches);  \n\n  return {\n    timeseriesFlat: results[0],\n    timeseriesVert: results[1],\n    stations: stationResults,\n  }\n}\n\nexport default Context;\n","import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { FlyToInterpolator } from '@deck.gl/core';\nimport StaticMap from 'react-map-gl';\n\nimport { MAPBOX_API_TOKEN } from '../vars';\n\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0,\n};\n\nconst mapStyles = {\n  MAPBOX_DARK: 'mapbox://styles/mapbox/dark-v9',\n  DARK: 'mapbox://styles/bobhead/ck8pf7npv0cda1iobxo3txanr',\n};\n\nfunction Map({\n  children,\n\n  layers = [],\n  viewState = initialViewState,\n}) {\n  return (\n    <DeckGL\n      initialViewState={initialViewState}\n      viewState={{\n        ...viewState,\n        transitionDuration: 3000,\n        transitionInterpolator: new FlyToInterpolator(),\n      }}\n      layers={layers}\n    >\n      <StaticMap\n        {...viewState}\n        reuseMaps\n        preventStyleDiffing={true}\n        mapStyle={mapStyles.DARK}\n        mapboxApiAccessToken={MAPBOX_API_TOKEN} />\n\n      <div style={{ zIndex: 1 }} children={children} />\n    </DeckGL>\n  )\n}\n\nMap.initialViewState = initialViewState;\n\nexport default Map;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nfunction SlideLayout({ children }) {\n  return (\n    <Layout style={{minHeight:\"100%\", background:'transparent'}}>\n      <Layout.Content style={{padding:'48px'}}>\n        {children}\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default SlideLayout;\n","import React from 'react';\nimport { Row, Col, Typography, Avatar, Space, Alert } from 'antd';\nimport { ExperimentTwoTone } from '@ant-design/icons';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\nimport { geoidToColor } from '../vars';\nimport EPAContext from '../contexts/EPAContext';\nimport ACSContext from '../contexts/ACSContext';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Text, Title } = Typography;\n\nconst main = (\n  <Space direction=\"vertical\" size=\"large\" style={{ padding: '48px' }}>\n    <Avatar size=\"large\" icon={<ExperimentTwoTone />} /> \n    <Typography>\n      <Title>Society and Air Quality</Title>\n      <Text>EOSC 410 Final Project</Text> | <Text type=\"secondary\">University of British Columbia, April 2020</Text>\n    </Typography>\n  </Space>\n)\n\nfunction IntroSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <EPAContext.Consumer>\n      {(epa) => {\n        // wait for ACS data - since this is the intro slide, we want to make sure *all* data is\n        // available\n        return (\n          <ACSContext.Consumer>\n            {(acs) => {\n              const isLoading = acs.loading || epa.loading\n              const isDataLoaded = !isLoading && !acs.err && !epa.err;\n\n              if (isDataLoaded && isSlideSelected) {\n                updateMapState({\n                  layers: [\n                    new GeoJsonLayer({\n                      id: 'intro-epa-layer',\n                      data: epa.stations[epa.stations.length-1],\n                      pointRadiusMinPixels: 3,\n                      getFillColor: (d) => {\n                        const { properties: { acs_geoid: geoid } } = d;\n                        return geoidToColor(geoid);\n                      },\n                    }),\n                  ],\n                });\n              }\n\n              return (\n                <SlideLayout>\n                  <Row>\n                    <Col span={4} offset={20}>\n                      <Space direction=\"vertical\">\n                        {isLoading ? <Alert message=\"Loading data...\" type=\"info\" /> : undefined}\n                        {isDataLoaded ? <Alert message={'Presentation data is ready!'} type=\"success\" showIcon /> : undefined}\n\n                        {(!isLoading && acs.err)\n                          ? <Alert message=\"Error occured when loading ACS data\" description={acs.err.message} type=\"error\" showIcon /> \n                          : undefined}\n                        {(!isLoading && epa.err)\n                          ? <Alert message=\"Error occured when loading EPA data\" description={epa.err.message} type=\"error\" showIcon />\n                          : undefined}\n                      </Space>\n                    </Col>\n                  </Row>\n                  {main}\n                </SlideLayout>\n              )\n            }}\n          </ACSContext.Consumer>\n        )\n      }}\n    </EPAContext.Consumer>\n  );\n}\n\nIntroSlide.footerText = 'by Robert Lin and Angelene Leow';\n\nexport default IntroSlide;\n","import React from 'react';\nimport { Card, Row, Col, Typography, Avatar, Space } from 'antd';\nimport { QuestionOutlined } from '@ant-design/icons';\nimport { GeoJsonLayer, PolygonLayer } from '@deck.gl/layers';\n\nimport { geoidToColor } from '../vars';\n\nimport ACSContext from '../contexts/ACSContext';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Title, Text } = Typography;\n\nfunction QuestionsSlide({ updateMapState, isSlideSelected }) {\n  return (\n    <ACSContext.Consumer>\n      {(acs) => {\n        if (!acs.loading && !acs.err && isSlideSelected) {\n          const { timeseriesFlat, regions } = acs;\n          updateMapState({\n            viewState: {\n              longitude: -98.5795,\n              latitude: 41.8283,\n              zoom: 3.5,\n              pitch: 45,\n              bearing: 15\n            },\n            layers: [\n              new GeoJsonLayer({\n                id: 'questions-acs-layer',\n                data: regions[regions.length-1],\n                pointRadiusMinPixels: 3,\n                getFillColor: (d) => geoidToColor(d.properties.geoid),\n                getLineColor: [255, 255, 255],\n                getElevation: (d) => {\n                  const { properties: { geoid } } = d;\n                  return Math.sqrt(timeseriesFlat[timeseriesFlat.length-1][`${geoid}.acs.total_pop`]) * 100;\n                },\n                opacity: 0.8,\n                stroked: false,\n                filled: true,\n                extruded: true,\n                wireframe: true,\n              }),\n            ]\n          });\n        }\n        return (\n          <SlideLayout>\n            <Row gutter={16}>\n              <Col span={8} offset={16}>\n                <Space direction=\"vertical\">\n                    <Card title=\"Questions\" bordered={false}>\n                      <Text>\n                        research questions, few sentences on the relevance of this study\n                      </Text>\n                    </Card>\n                </Space>\n              </Col>\n            </Row>\n          </SlideLayout>\n        )\n      }}\n    </ACSContext.Consumer>\n  );\n}\n\nQuestionsSlide.footerText = 'Simplified ACS CBSA regional boundaries, with heights representing total population'\n\nexport default QuestionsSlide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nexport default Slide;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nimport SlideLayout from '../components/SlideLayout';\n\nconst { Title } = Typography;\n\nfunction Slide() {\n  return (\n    <SlideLayout>\n      <Title>TODO</Title>\n    </SlideLayout>\n  );\n}\n\nSlide.footerText = 'TODO link to github';\n\nexport default Slide;\n","import React, { useRef, useState } from 'react';\nimport { Carousel, Layout, Button, Row, Col, Typography } from 'antd';\nimport { ArrowRightOutlined, ArrowLeftOutlined } from '@ant-design/icons';\n\nimport './App.css';\n\n// contexts for data\nimport ACSContext from './contexts/ACSContext';\nimport EPAContext from './contexts/EPAContext';\nimport SingleLoader from './contexts/SingleLoader';\n\n// map\nimport Map from './maps/Map';\n\n// slideshow components\nimport Intro from './slides/Intro';\nimport Questions from './slides/Questions';\nimport MethodologyData from './slides/methodology/Data';\nimport MethodologyProcessing from './slides/methodology/Processing';\nimport MethodologyAnalysis from './slides/methodology/Analysis';\nimport End from './slides/End';\n\nconst { Text } = Typography; \n\nfunction App() {\n  // map state\n  const [mapState, setMapState] = useState({\n    prevUpdateID: -1,\n\n    viewState: Map.initialViewState,\n    layers: [],\n\n    mapStyle: 'DARK',\n    hideMapLayer: false,\n  });\n\n  // slides\n  const [slideID, setSlide] = useState(0);\n  const slider = useRef();\n  const slides = [\n    Intro,\n    Questions,\n    MethodologyData,\n    MethodologyProcessing,\n    MethodologyAnalysis,\n    End,\n  ];\n  const carouselNodes = slides.map((S, id) => <S\n    slideID={id}\n    isSlideSelected={id === slideID}\n    updateMapState={(s, updateID) => {\n      const stateUpdateID = (updateID | id);\n      if (stateUpdateID !== mapState.prevUpdateID) {\n        setMapState({ prevUpdateID: stateUpdateID, ...s });\n      }\n    }}\n  />)\n\n  // the entire app pretty much\n  const main = (\n    <Layout style={{minHeight:\"100vh\"}}>\n      <Layout.Content>\n        <Map {...mapState}>\n          <Carousel\n            ref={ref => { slider.current = ref; }}\n            style={{minHeight:\"100vh\"}}\n            dotPosition=\"top\"\n            beforeChange={(_, to) => { setSlide(to); }}\n            children={carouselNodes} />\n        </Map>\n      </Layout.Content>\n\n      <Layout.Footer>      \n        <Row justify=\"space-between\" type=\"flex\" align=\"middle\">\n          <Col span={4}>\n            {slideID > 0\n              ? <Button type=\"primary\" shape=\"round\" icon={<ArrowLeftOutlined />} size=\"large\"\n                  onClick={() => { slider.current.prev() }}/>\n              : undefined}\n          </Col>\n          <Col span={8} style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            verticalAlign: \"middle\",\n            textAlign: \"center\"\n          }} offset={slideID > 0 ? 0 : 4}>\n            <Text type=\"secondary\" style={{ verticalAlign: \"middle\", alignItems: \"center\", textAlign: \"center\" }}>\n              {slides[slideID].footerText}\n            </Text>\n          </Col>\n          <Col span={4} >\n            <Button type=\"primary\" shape=\"round\" icon={<ArrowRightOutlined />} size=\"large\" style={{ float: 'right' }}\n              onClick={() => { slider.current.next() }}/>\n          </Col>\n        </Row>\n      </Layout.Footer>\n    </Layout>\n  )\n\n  return (\n    <SingleLoader context={ACSContext}>\n      <SingleLoader context={EPAContext}>\n          {main}\n      </SingleLoader>\n    </SingleLoader>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}